@model IEnumerable<WeatherStation.Models.MesuresClimatChoix>
@{
    System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
    customCulture.NumberFormat.NumberDecimalSeparator = ".";
    System.Threading.Thread.CurrentThread.CurrentCulture = customCulture;
}
    <div id = "vertical2_Courbesepare" style = "height:95%; width: 100%;">
       @* menu*@
        <div id = "top-pane">
            <ul id = "menu_date_sep">
                <li id = "Horaire_Sep" onclick = "HourPicker();" style = "width:110px">Horaire</li>
                <li id = "Journaliere_Sep" onclick = "gggg();" style = "width:100px">Journaliére </li>
                <li id = "Hebdomadaire_Sep" onclick = "WeekPicker();">Hebdomadaire </li>
                <li id = "mensuelle_Sep" onclick = "MonthPicker();" style = "width:100px">mensuelle </li>
                <li id = "periodique_Sep" onclick = "Periode();"style = "width:100px">periodique </li>
            </ul>  
            <ul style = "border-radius: 5px" id = "menu_reporting_separ">
                <li  onClick = "clickMonBoutonExcel();"><img src = "../../Content/images/excel.png" /></li>
                <li onClick = "clickMonBoutonPdf();"><img src = "../../Content/images/curve.png"></li>
                <li><img src = "../../Content/images/pdf.jpeg"> </li>
                <li><img id = "refresh_serp" src = "../../Content/images/refresh.png" /></li>
                <li id = "colorpicker_separ" onClick = "clickColorPicker();"></li>
            </ul>  
        </div>
        @* chart*@
        <div id = "middle-pane">
            <div id = "stock-chart_separ"></div>
        </div>
         @* Grid*@
        <div id = "bottom-pane">
            <div id = "grid_Courbes_separées" style = "height: 100%"></div>
        </div>
    </div>
    @* window*@
    <div id = "window2_separ"style = "display:none">
        <center>
            <br /><br />
            <strong><label for = "start">date debut:</label></strong><input id = "start" style = "width: 200px" />
            <br /><br /><br /><br />
            <strong> <label for = "end">date fin:</label></strong><input id = "end" style = "width: 200px" />
            <br /><br />
            <button type = "button" id = "valider_periode_separ">Valider</button>
            <button type = "button" id = "annuler_separ">Annuler</button>
            <br /><br/>
        </center>  
    </div>        

<script type = "text/javascript">

    function clickColorPicker() {
        colorpicker.open();
    }
    var colorpicker = $("#colorpicker_separ").kendoColorPicker({
        change: function (e) {
            //kendoConsole.log("Change in picker #" + this.element.attr("id") + " :: " + e.value);
            var stockChart = $("#stock-chart_separ").data("kendoStockChart");
            stockChart.options.series[0].color = e.value;
            stockChart.options.valueAxis[0].color = e.value;
            stockChart.options.valueAxis[0].labels.color = e.value;
            stockChart.options.valueAxis[0].line.color = e.value;
            stockChart.options.valueAxis[0].title.color = e.value;
            stockChart.options.series[2].color = e.value;
            stockChart.refresh();
        },
        //  toolIcon: "k-foreColor"
    }).data("kendoColorPicker");

    var nb = 0;
    var cat = [], temp_ = [], hum_ = [], pluv_ = [], ray_ = [], vitesse_vent = [], sens_vent = [],orders_grid = [];
    var k = 1;
       
        var min_temp_s = 100, max_temp_s = null, min_hum_s = 100, max_hum_s = null ,
            min_pluv_s = null, max_pluv_s = null, min_ray_s = null, max_ray_s = null, min_vitesse_s = null, max_vitesse_s, min_sens_s = null, max_sens_s = null;
    
    @foreach (var mesure in Model)
    {
        if (mesure.TemperatureClimat == null)
        {
            @:temp_.push(null);
        }
        else
        {
            @:temp_.push(@mesure.TemperatureClimat); 
            @:if(@mesure.TemperatureClimat < min_temp_s)
            {
                @:min_temp_s = @mesure.TemperatureClimat;
            }
            @:if(@mesure.TemperatureClimat > max_temp_s)
            {
                @:max_temp_s = @mesure.TemperatureClimat;
            }
        }

        if (mesure.HumiditeClimat == null)
        {
            @:hum_.push(null);
        }
        else
        {
            @:hum_.push(@mesure.HumiditeClimat);
             @:if(@mesure.HumiditeClimat < min_hum_s)
            {
                @:min_hum_s = @mesure.HumiditeClimat;
            }
            @:if(@mesure.HumiditeClimat > max_hum_s)
            {
                @:max_hum_s = @mesure.HumiditeClimat;
            }
        }

        if (mesure.PluviometrieClimat == null)
        {
            @:pluv_.push(null);
        }
        else
        {
             @:pluv_.push(@mesure.PluviometrieClimat);
            @:if(@mesure.PluviometrieClimat < min_pluv_s)
            {
                @:min_pluv_s = @mesure.PluviometrieClimat;
            }
            @:if(@mesure.PluviometrieClimat > max_pluv_s)
            {
                @:max_pluv_s = @mesure.PluviometrieClimat;
            }
        }

        if (mesure.RayonnementClimat == null)
        {
            @:ray_.push(null);
        }
        else
        {
            @:ray_.push(@mesure.RayonnementClimat);
             @:if(@mesure.RayonnementClimat < min_ray_s)
            {
                @:min_ray_s = @mesure.RayonnementClimat;
            }
            @:if(@mesure.RayonnementClimat > max_ray_s)
            {
                @:max_ray_s = @mesure.RayonnementClimat;
            }
        }

        if (mesure.VitesseVentClimat == null)
        {
            @:vitesse_vent.push(null);
        }
        else
        {
            @:vitesse_vent.push(@mesure.VitesseVentClimat);
            @:if(@mesure.VitesseVentClimat < min_vitesse_s)
            {
                @:min_vitesse_s = @mesure.VitesseVentClimat;
            }
            @:if(@mesure.VitesseVentClimat > max_vitesse_s)
            {
                @:max_vitesse_s = @mesure.VitesseVentClimat;
            }
        }

        if (mesure.SensVentClimat == null)
        {
            @:sens_vent.push(null);
        }
        else
        {
             @:sens_vent.push(@mesure.SensVentClimat);
             @:if(@mesure.SensVentClimat < min_sens_s)
            {
                @:min_sens_s = @mesure.SensVentClimat;
            }
            @:if(@mesure.SensVentClimat > max_sens_s)
            {
                @:max_sens_s = @mesure.SensVentClimat;
            }
        }
     
  
        @:cat.push('@mesure.DateMesure.ToString("yyyy/MM/dd HH:mm:ss")');

               if (mesure.TemperatureClimat != null)
               {
        @:orders_grid.push({
            @:Id: k,
            @:OrderDate : '@mesure.DateMesure',
            @:Temperature : '@mesure.TemperatureClimat',
            @:Humidite : '@mesure.HumiditeClimat',
            @:Rayonnement : '@mesure.RayonnementClimat',
            @:Pluviometrie : '@mesure.PluviometrieClimat',
            @:VitesseVent : '@mesure.VitesseVentClimat',
            @:sensvent : '@mesure.SensVentClimat'
        @:});
        @:k = k+1;
    }
    }
    var chartpanes = [];
    var chartvalueaxis = [];
    var chartvseries = [];
    var Columns_Grid = [];
    Columns_Grid.push({
    field: "Id",
        title: "Id",
        width: 30,
        headerAttributes : {
            style: "text-align:center"
        }
    });
    Columns_Grid.push({
    field: "OrderDate",
        title: "Date",
        format: "{0:yyyy/MM/dd HH:mm:ss}",
        width: 100,
        headerAttributes : {
            style: "text-align:center"
        }
    });
   
   
    if( ('@Model.ElementAt(0).Temp_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "Temperature",
            title: "Température(°C)",
            width: 50,
            headerAttributes : {
                style: "text-align:center"
            }
        });
        chartpanes.push({
            name: "volumePane1",
            title: "",
           // height: 80, 
        });
        chartvalueaxis.push({
            pane: "volumePane1",
            name: "volumeAxis1",
            line: {
                visible: true
            },
            color:"#910000",
            labels: {
                format: "{0}"
            },
            min: Math.floor(min_temp_s - (max_temp_s - min_temp_s) * 0.1),
            max: Math.ceil(max_temp_s + (max_temp_s - min_temp_s) * 0.1),
            title: {
                text: "température(°C)",
                font: "12px sans-serif",
            },
            height: 100
        });
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: temp_,
            name:"température",
            color:"#910000",
            axis: "volumeAxis1",
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value # °C"
            },
            markers:{
            visible: false
            }
        });
     }

    if( ('@Model.ElementAt(0).Hum_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "Humidite",
            title: "Humidité(%)",
            width: 50,
            headerAttributes : {
                style: "text-align:center"
            }
        }); 
        chartpanes.push({
            name: "volumePane2",
            title: "",
        });
        chartvalueaxis.push({
            pane: "volumePane2",
            name: "volumeAxis2",
            data: hum_,
            line: {
                visible: true
            },
            color:"#492970",
            labels: {
                format: "{0}"
            }, 
            title: {
                text: "humidité(%)",
                font: "12px sans-serif",
            },
            min: Math.floor(min_hum_s - (max_hum_s - min_hum_s) * 0.1),
            max: Math.ceil(max_hum_s + (max_hum_s - min_hum_s) * 0.1),
        });
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: hum_,
            axis: "volumeAxis2",
            name: "humidité",
            color: "#492970",
            tooltip: {
                format: "{0:C0}"
            },
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value # %"
            },
            markers:{
                visible: false
            },
        });
    }

    if(('@Model.ElementAt(0).Pluv_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "Pluviometrie",
            title: "Pluviométrie(mm)",
            width: 50,
            headerAttributes : {
                style: "text-align:center"
            }
        });
        chartpanes.push({
            name: "volumePane",
            title: "",
        });
        chartvalueaxis.push({
            pane: "volumePane",
            name: "volumeAxis",
            color:"#2f7ed8",
            labels: {
                format: "{0}"
            }, 
            title: {
                text: "pluviométrie(mm)",
                font: "12px sans-serif",
            },
            min: Math.floor(min_pluv_s - (max_pluv_s - min_pluv_s) * 0.1),
            max: Math.ceil(max_pluv_s + (max_pluv_s - min_pluv_s) * 0.1),
            
        });
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: pluv_,
            axis: "volumeAxis",
            name:"pluviometrie",
            color:"#2f7ed8",
            tooltip: {
                format: "{0:C0}"
            },
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value # mm"
            },
            markers:{
            visible: false
            }
        });
    }
     if(('@Model.ElementAt(0).Ray_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "Rayonnement",
            title: "Rayonnement solaire(watt/m²)",
            width: 50,
            headerAttributes : {
                style: "text-align:center"
            }
        });
        chartpanes.push({
            name: "RayonPane",
            title: "",
        });
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: ray_,
            axis: "volumeAxis3",
            color:"#e9b657",
            name:"rayonnement solaire",
            tooltip: {
                format: "{0:C0}"
            },
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value # watt/m²"
            },
            markers:{
            visible: false
            }
        });
        chartvalueaxis.push({
            pane: "RayonPane",
            name: "volumeAxis3",
            color: "#e9b657",
            labels: {
                format: "{0}"
            }, 
            title: {
                text: "Rayonnement solaire(watt/m²)",
                font: "12px sans-serif",
            },
            min: Math.floor(min_ray_s - (max_ray_s - min_ray_s) * 0.1),
            max: Math.ceil(max_ray_s + (max_ray_s - min_ray_s) * 0.1),
            
        });
    }

       if(('@Model.ElementAt(0).Vitesse_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "VitesseVent",
            title: "Vitesse du vent(m/s)",
            width: 50,
            headerAttributes : {
                style: "text-align:center",
            }
        });
        chartpanes.push({
            name: "VitessePane",
            title: "",
        });
        chartvalueaxis.push({
            pane: "VitessePane",
            name: "volumeAxis4",
            color:"#0d233a",
            labels: {
                format: "{0}"
            }, 
            title: {
                text: "vitesse du vent(m/s)",
                font: "12px sans-serif",
            },
//            min: Math.floor(min_vitesse_s - (max_vitesse_s - min_vitesse_s) * 0.1),
//            max: Math.ceil(max_vitesse_s + (max_vitesse_s - min_vitesse_s) * 0.1),
            
        });
     
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: vitesse_vent,
            axis: "volumeAxis4",
            color: "#0d233a",
            name: "vitesse du vent",
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value # m/s",
                format: "{0:C0}"

            },
            markers:{
            visible: false
            }
        });
    }

     if(('@Model.ElementAt(0).Sens_Etat').toString()== "True") {
        nb++;
        Columns_Grid.push({
            field: "sensvent",
            title: "Sens du vent(°)",
            width: 50,
            headerAttributes : {
                style: "text-align:center"
            }
        });
        chartpanes.push({
            name: "SensPane",
            title: "",
        });
        chartvalueaxis.push({
            pane: "SensPane",
            name: "volumeAxis5",
            color:"#105380",
            labels: {
                format: "{0}"
            }, 
            title: {
                text: "sens du vent()",
                font: "12px sans-serif",
            },
            min: Math.floor(min_sens_s - (max_sens_s - min_sens_s) * 0.1),
            max: Math.ceil(max_sens_s + (max_sens_s - min_sens_s) * 0.1),
            
        });
        chartvseries.push({
            type: "line",
            style: "smooth",
            data: sens_vent,
            name:"sens du vent",
            axis: "volumeAxis5",
            color:"#105380",
            tooltip: {
                format: "{0:C0}"
            },
            tooltip: {
                visible: true,
                template: "#= (category.toString()).substring(0, 21) # ;#= series.name # - #= value #°"
            },
            markers:{
                visible: false
            }
        });
    }

    if(nb == 6)
    {
       $('#stock-chart_separ').css("height", '800px'); 
    }
    else if(nb == 5)
    {
       $('#stock-chart_separ').css("height", '700px'); 
    }
    else if(nb == 4)
    {
       $('#stock-chart_separ').css("height", '600px'); 
    }
    else if(nb == 3)
    {
       $('#stock-chart_separ').css("height", '500px'); 
    }
    else if(nb == 2)
    {
       $('#stock-chart_separ').css("height", '400px'); 
    }
    else if(nb == 1)
    {
       $('#stock-chart_separ').css("height", '100%'); 
    }


</script>


<script type="text/javascript">
    @*spliter*@
    $("#vertical2_Courbesepare").kendoSplitter({
        orientation: "vertical",
        panes: [
            { collapsible: true, size: "6%" },
            { collapsible: true, size: "64%" },
            { collapsible: true, size: "30%" }
        ]
    });
      @* menu selection date*@
        var initMenu = function () {
            $("#menu_date_sep").kendoMenu({
            }).css({
                'float': 'left',
                //'margin-top': $("#image").height() / 4
            });
        };
        initMenu();
         @* menu reporting*@
            $("#menu_reporting_separ").clone(true).find(".k-state-active").removeClass("k-state-active");
            $("#menu_reporting_separ").kendoMenu({
            }).css({
                'float': 'right',
                //'margin-right': 30,
                'height': $("#menu_date_sep").height()
                //'margin-top': $("#image").height() / 4
            });

    @*chart*@
    $("#stock-chart_separ").kendoStockChart({
        title: {
            text: "Date : " + kendo.format('{0:dd/MM/yyyy}',new Date()),
            color: "#000000",
            font: "12px sans-serif",
        },
        dateField: null,
        panes: chartpanes,
        categoryAxis: {
            categories: cat,
            pane: "volumePane",
            type: "date",
            baseUnit: "minutes",
            majorGridLines: {
                visible: false
            },
            labels: {
                visible: true,
                step: 120
            },                   
            majorTicks: {
                visible: true,
                size: 4,
                step: 60,
            }            
        },
        valueAxes: chartvalueaxis,
        series: chartvseries,
        navigator: {
            categoryAxis: {
                dateField: null,
                categories: cat,
            },
            hint: {
                visible: false,
            },
            series: chartvseries,
        }
    });

     function onChange(arg) {
        var selected = $.map(this.select(), function (item) {

            Selection_Courbe($(item).text());
            return $(item).text();
        });
        kendoConsole.log("Selected: " + selected.length + " item(s), [" + selected.join(", ") + "]");
    }
    @* grid*@
    $("#grid_Courbes_separées").kendoGrid({
        dataSource: {
            data: orders_grid,
            pageSize: 500
        },
        height: '99%',
        change: onChange,
        selectable: true,
        scrollable: true,
        groupable: false,
        sortable: true,
        pageable: {
            refresh: true,
            pageSizes: true,
            buttonCount: 3
        },
        columns: Columns_Grid
    });
   </script> 

   <script type = "text/javascript">
       var window = $("#window2_separ"),
                    undo = $("#undo")
                            .bind("click", function () {
                                $("#window2").data("kendoWindow").center().open();
                            });
       undo.show();
       var onClose = function () {
           undo.show();
       }
       if (!$("#window2_separ").data("kendoWindow")) {
           $("#window2_separ").kendoWindow({
               width: "400px",
               title: "Choix periode",
               actions: [
                            "Close"
                        ],
               close: onClose
           });
       }
     </script>

@*choix heure*@
<script type = "text/javascript">
    $("#Horaire_Sep").kendoDateTimePicker({
        close: myfunctionheurrefresh,
    });
    //$(".k-state-default > .k-select").css("visibility", "hidden");
    $(".k-input").css("background-color", "#e8e8e8");
    $(".k-state-hover> .k-picker-wrap > .k-state-default").css("visibility", "hidden");
    var datepicker_hour = $("#Horaire_Sep").data("kendoDateTimePicker");
    function HourPicker() {
        datepicker_hour.open();
    }
    function myfunctionheurrefresh() {
        var table = [], tab_hum = [],tab_pluv = [],tab_ray = [],tab_vitesse = [],tab_sens_vent = [];
        var startTime = $("#Horaire_Sep").data("kendoDateTimePicker").value();
        var orders_update = [], seuil_min = [],seuil_max = [],cat_time = [],temp_time = [];
        var min_temp = 0,Max_temp = 0, min_hum = 0, Max_hum = 0, min_pluv = 0, Max_pluv = 0, min_ray = 0;
        var Max_ray = 0, min_vitesse_vent = 0, Max_vitesse_vent = 0, min_sens_vent = 0, Max_sens_vent = 0, id = 1;
        $.ajax({
            url: '../../UserSession/AllClimatByIntervalOneHour',
            type: 'GET',
            data: { idNoeudClimat : 134, startTime : startTime },
            dataType: 'json',
            async: false,
            success: function (res) {
                var i = 0, k = 0, h = 0, g = 0,d = 0, f = 0;
                while ((res[i].TemperatureClimat == null) && (i < res.length - 1)){
                    i++;
                }
                while ((res[k].HumiditeClimat == null) && (k < res.length - 1)) {
                    k++;
                }
                while ((res[h].PluviometrieClimat == null) && (h < res.length - 1)) {
                    h++;
                }
                while ((res[g].RayonnementClimat == null) && (g < res.length - 1)) {
                    g++;
                }
                while ((res[d].VitesseVentClimat == null) && (d < res.length - 1)) {
                    d++;
                }
                while ((res[f].SensVentClimat == null) && (f < res.length - 1)) {
                    f++;
                }
                min_temp = res[i].TemperatureClimat;
                Max_temp = res[i].TemperatureClimat;
                min_hum = res[k].HumiditeClimat;
                Max_hum = res[k].HumiditeClimat;
                min_pluv = res[h].PluviometrieClimat;
                Max_pluv = res[h].PluviometrieClimat;
                Max_ray = res[g].RayonnementClimat;
                min_ray = res[g].RayonnementClimat;
                min_vitesse_vent = res[d].VitesseVentClimat;
                Max_vitesse_vent = res[d].VitesseVentClimat;
                min_sens_vent = res[f].SensVentClimat;
                Max_sens_vent = res[f].SensVentClimat;
                for (var j = 0; j < res.length; j++) {
                    var date = new Date(Number(res[j].DateMesure.substring(6, 19)));
                    var temps = res[j].DateMesure;
                    temp_time.push(res[j].TemperatureClimat);
                    cat_time.push(temps);
                    table.push(res[j].TemperatureClimat);
                    tab_hum.push(res[j].HumiditeClimat);
                    tab_pluv.push(res[j].PluviometrieClimat);
                    tab_ray.push(res[j].RayonnementClimat);
                    tab_vitesse.push(res[j].VitesseVentClimat);
                    tab_sens_vent.push(res[j].SensVentClimat);
                    if(res[j].TemperatureClimat!= null)
                    {
                        if(res[j].TemperatureClimat > Max_temp)
                        {
                            Max_temp = res[j].TemperatureClimat;
                        }
                        else if(res[j].TemperatureClimat < min_temp)
                        {
                            min_temp = res[j].TemperatureClimat;
                        }
                        if(res[j].HumiditeClimat > Max_hum)
                        {
                            Max_hum = res[j].HumiditeClimat;
                        }
                        else if(res[j].HumiditeClimat < min_hum)
                        {
                            min_hum = res[j].HumiditeClimat;
                        }
                        if(res[j].PluviometrieClimat > Max_pluv)
                        {
                            Max_pluv = res[j].PluviometrieClimat;
                        }
                        else if(res[j].PluviometrieClimat < min_pluv)
                        {
                            min_pluv = res[j].PluviometrieClimat;
                        }
                        if(res[j].RayonnementClimat > Max_ray)
                        {
                            Max_ray = res[j].RayonnementClimat;
                        }
                        else if(res[j].RayonnementClimat < min_ray)
                        {
                            min_ray = res[j].RayonnementClimat;
                        }
                        if(res[j].VitesseVentClimat > Max_vitesse_vent)
                        {
                            Max_vitesse_vent = res[j].VitesseVentClimat;
                        }
                        else if(res[j].VitesseVentClimat < min_vitesse_vent)
                        {
                            min_vitesse_vent = res[j].VitesseVentClimat;
                        }
                         if(res[j].SensVentClimat > Max_sens_vent)
                        {
                            Max_sens_vent = res[j].SensVentClimat;
                        }
                        else if(res[j].SensVentClimat < min_sens_vent)
                        {
                            min_sens_vent = res[j].SensVentClimat;
                        }
                        orders_update.push({
                            Id: id,
                            OrderDate: date,
                            Temperature: res[j].TemperatureClimat,
                            Humidite: res[j].HumiditeClimat,
                            Pluviometrie: res[j].PluviometrieClimat,
                            Rayonnement: res[j].RayonnementClimat,
                            VitesseVent: res[j].VitesseVentClimat,
                            sensvent: res[j].SensVentClimat,
                        });
                        id++;
                    }
                }
            }
        });
        //alert(cat_time.length);
        jQuery("#grid_Courbes_separées").data("kendoGrid").dataSource.data(orders_update); 
        jQuery("#grid_Courbes_separées").data("kendoGrid").refresh();
        var stockChart = $("#stock-chart_separ").data("kendoStockChart");
        stockChart.options.title.text = "time : " + kendo.format('{0:dd/MM/yyyy HH:mm}',startTime); 
        stockChart.options.categoryAxis[0].categories = cat_time;
        stockChart.options.categoryAxis[0].labels.step = 5;
        stockChart.options.categoryAxis[0].majorTicks.step = 1;
        stockChart.options.categoryAxis[0].baseUnit = "minutes";
        for(var u=0;u<Columns_Grid.length-2;u++)
            {
                if(Columns_Grid[u+2].field == "Temperature")
                {
                    stockChart.options.series[u].data = table;
                    stockChart.options.series[u + Columns_Grid.length-2].data = table;
                    stockChart.options.valueAxis[u].min = Math.floor(min_temp - (Max_temp - min_temp) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_temp + (Max_temp - min_temp) * 0.1);
                } 
                else if(Columns_Grid[u+2].field == "Humidite")
                {
                    stockChart.options.series[u].data = tab_hum;
                    stockChart.options.series[u + Columns_Grid.length-2].data = tab_hum;
                    stockChart.options.valueAxis[u].min =  Math.floor(min_hum - (Max_hum - min_hum) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_hum + (Max_hum - min_hum) * 0.1);
                }
                else if(Columns_Grid[u+2].field == "Pluviometrie")
                {
                    stockChart.options.series[u].data = tab_pluv;
                    stockChart.options.series[u+Columns_Grid.length-2].data = tab_pluv;
                    stockChart.options.valueAxis[u].min =  Math.floor(min_pluv - (Max_pluv - min_pluv) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_pluv + (Max_pluv - min_pluv) * 0.1);
                }
                else if(Columns_Grid[u+2].field == "Rayonnement")
                {
                    stockChart.options.series[u].data = tab_ray;
                    stockChart.options.series[u+Columns_Grid.length-2].data = tab_ray;
                    stockChart.options.valueAxis[u].min =  Math.floor(min_ray - (Max_ray - min_ray) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_ray + (Max_ray - min_ray) * 0.1);
                }
                else if(Columns_Grid[u+2].field == "VitesseVent")
                {
                    stockChart.options.series[u].data = tab_vitesse;
                    stockChart.options.series[u+Columns_Grid.length-2].data = tab_vitesse;
                    stockChart.options.valueAxis[u].min =  Math.floor(min_vitesse_vent - (Max_vitesse_vent - min_vitesse_vent) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_vitesse_vent + (Max_vitesse_vent - min_vitesse_vent) * 0.1);
                }
                else if(Columns_Grid[u+2].field == "sensvent")
                {
                    stockChart.options.series[u].data = tab_sens_vent;
                    stockChart.options.series[u+Columns_Grid.length-2].data = tab_sens_vent;
                     stockChart.options.valueAxis[u].min =  Math.floor(min_sens_vent - (Max_sens_vent - min_sens_vent) * 0.1);
                    stockChart.options.valueAxis[u].max = Math.ceil(Max_sens_vent + (Max_sens_vent - min_sens_vent) * 0.1);
                }
            }
        stockChart.options.categoryAxis[1].categories = cat_time;
        stockChart.options.categoryAxis[1].labels.step = 5;
        stockChart.options.categoryAxis[1].majorTicks.step = 1;
        stockChart.options.categoryAxis[1].baseUnit = "minutes";
        stockChart._navigator.options.select.from = cat_time[0];
        stockChart._navigator.options.select.to = cat_time[cat_time.length-1];
        stockChart.refresh();
     }
</script>


@*choix date*@
<script type="text/javascript">
    $("#Journaliere_Sep").kendoDatePicker({
         close: myfunctionDaterefresh,
    });
         $(".k-input").css("background-color", "#e8e8e8");
	    $(".k-state-hover> .k-picker-wrap > .k-state-default").css("visibility", "hidden");
	    
	    var datepicker = $("#Journaliere_Sep").data("kendoDatePicker");
	    function gggg() {
	     datepicker.open("date");
	    }
    
        function myfunctionDaterefresh() {
          var startTime = $("#Journaliere_Sep").data("kendoDatePicker").value();
          if (startTime == null) {
            startTime = new Date();
          }
          var list9 = [], Min_Max = [],  orders_update = [],temp_date = [],cat_date = [];
          var table = [], tab_hum = [],tab_pluv = [],tab_ray = [],tab_vitesse = [],tab_sens_vent = [];
          var min_temp , Max_temp, min_hum, Max_hum, Max_ray, min_ray, Max_pluv, min_pluv, Max_vitesse_vent, min_vitesse_vent, Max_sens_vent, min_sens_vent;
          var nb = 1;
          $.ajax({
            url: '../../UserSession/AllMesuresClimatByIntervalOneDay',
            type: 'GET',
            data: { idNoeudClimat : @Model.ElementAt(0).IdParentNode, startTime : startTime },
            dataType: 'json',
            async: false,
            success: function (res) {
                var i = 0, k = 0, h = 0, g = 0,d = 0, f = 0;
                while ((res[i].TemperatureClimat == null) && (i < res.length - 1)){
                    i++;
                }
                while ((res[k].HumiditeClimat == null) && (k < res.length - 1)) {
                    k++;
                }
                while ((res[h].PluviometrieClimat == null) && (h < res.length - 1)) {
                    h++;
                }
                while ((res[g].RayonnementClimat == null) && (g < res.length - 1)) {
                        g++;
                }
                while ((res[d].VitesseVentClimat == null) && (d < res.length - 1)) {
                        d++;
                }
                while ((res[f].SensVentClimat == null) && (f < res.length - 1)) {
                        f++;
                }
                min_temp = res[i].TemperatureClimat;
                Max_temp = res[i].TemperatureClimat;
                min_hum = res[k].HumiditeClimat;
                Max_hum = res[k].HumiditeClimat;
                min_pluv = res[h].PluviometrieClimat;
                Max_pluv = res[h].PluviometrieClimat;
                Max_ray = res[g].RayonnementClimat;
                min_ray = res[g].RayonnementClimat;
                min_vitesse_vent = res[d].VitesseVentClimat;
                Max_vitesse_vent = res[d].VitesseVentClimat;
                min_sens_vent = res[f].SensVentClimat;
                Max_sens_vent = res[f].SensVentClimat;
                for (var j = 0; j < res.length; j++) {
                    var date = new Date(Number(res[j].DateMesure.substring(6, 19)));
                       table.push(res[j].TemperatureClimat);
                       tab_hum.push(res[j].HumiditeClimat);
                       tab_pluv.push(res[j].PluviometrieClimat);
                       tab_ray.push(res[j].RayonnementClimat);
                       tab_vitesse.push(res[j].VitesseVentClimat);
                       tab_sens_vent.push(res[j].SensVentClimat);
                    
                    if (res[j].TemperatureClimat != null) {
                        if(res[j].TemperatureClimat>Max_temp)
                        {
                            Max_temp = res[j].TemperatureClimat;
                        }
                        else if(res[j].TemperatureClimat<min_temp)
                        {
                            min_temp = res[j].TemperatureClimat;
                        }
                        if(res[j].HumiditeClimat > Max_hum)
                        {
                            Max_hum = res[j].HumiditeClimat;
                        }
                        else if(res[j].HumiditeClimat < min_hum)
                        {
                            min_hum = res[j].HumiditeClimat;
                        }
                        if(res[j].PluviometrieClimat > Max_pluv)
                        {
                            Max_pluv = res[j].PluviometrieClimat;
                        }
                        else if(res[j].PluviometrieClimat < min_pluv)
                        {
                            min_pluv = res[j].PluviometrieClimat;
                        }
                        if(res[j].RayonnementClimat > Max_ray)
                        {
                            Max_ray = res[j].RayonnementClimat;
                        }
                        else if(res[j].RayonnementClimat < min_ray)
                        {
                            min_ray = res[j].RayonnementClimat;
                        }
                        if(res[j].VitesseVentClimat > Max_vitesse_vent)
                        {
                            Max_vitesse_vent = res[j].VitesseVentClimat;
                        }
                        else if(res[j].VitesseVentClimat < min_vitesse_vent)
                        {
                            min_vitesse_vent = res[j].VitesseVentClimat;
                        }
                         if(res[j].SensVentClimat > Max_sens_vent)
                        {
                            Max_sens_vent = res[j].SensVentClimat;
                        }
                        else if(res[j].SensVentClimat < min_sens_vent)
                        {
                            min_sens_vent = res[j].SensVentClimat;
                        }
                        orders_update.push({
                            Id:nb++,
                            OrderDate: date,
                            Temperature: res[j].TemperatureClimat,
                            Humidite: res[j].HumiditeClimat,
                            Pluviometrie: res[j].PluviometrieClimat,
                            Rayonnement: res[j].RayonnementClimat,
                            VitesseVent: res[j].VitesseVentClimat,
                            sensvent: res[j].SensVentClimat,
                        });
                    }
                    var temps_= res[j].DateMesure;
                    temp_date.push(res[j].TemperatureClimat);
                    cat_date.push(temps_);
                }
            }
         });

        jQuery("#grid_Courbes_separées").data("kendoGrid").dataSource.data(orders_update); 
        jQuery("#grid_Courbes_separées").data("kendoGrid").refresh();
        var stockChart = $("#stock-chart_separ").data("kendoStockChart");
        stockChart.options.title.text = "Date : " + kendo.format('{0:dd/MM/yyyy}',startTime); 
            //stockChart.options.title.text = "Your new value axis title here"; 
            stockChart.options.categoryAxis[0].categories=cat_date;
             for(var u=0;u<Columns_Grid.length-2;u++)
              {
              if(Columns_Grid[u+2].field == "Temperature")
              {
                stockChart.options.series[u].data = table;
                stockChart.options.series[u+Columns_Grid.length-2].data = table;
                stockChart.options.valueAxis[u].min = Math.floor(min_temp - (Max_temp - min_temp) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_temp + (Max_temp - min_temp) * 0.1);
              }
              else if(Columns_Grid[u+2].field == "Humidite")
              {
                stockChart.options.series[u].data = tab_hum;
                stockChart.options.series[u + Columns_Grid.length-2].data = tab_hum;
                stockChart.options.valueAxis[u].min = Math.floor(min_hum - (Max_hum - min_hum) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_hum + (Max_hum - min_hum) * 0.1);
              }
              else if(Columns_Grid[u+2].field == "Pluviometrie")
              {
                stockChart.options.series[u].data = tab_pluv;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_pluv;
                stockChart.options.valueAxis[u].min = Math.floor(min_pluv - (Max_pluv - min_pluv) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_pluv + (Max_pluv - min_pluv) * 0.1);
              }
              else if(Columns_Grid[u+2].field == "Rayonnement")
              {
                stockChart.options.series[u].data = tab_ray;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_ray;
                stockChart.options.valueAxis[u].min = Math.floor(min_ray - (Max_ray - min_ray) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_ray + (Max_ray - min_ray) * 0.1);
              }
              else if(Columns_Grid[u+2].field == "VitesseVent")
              {
                stockChart.options.series[u].data = tab_vitesse;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_vitesse;
                stockChart.options.valueAxis[u].min = Math.floor(min_vitesse_vent - (Max_vitesse_vent - min_vitesse_vent) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_vitesse_vent + (Max_vitesse_vent - min_vitesse_vent) * 0.1);
              }
              else if(Columns_Grid[u+2].field == "sensvent")
              {
                stockChart.options.series[u].data = tab_sens_vent;
                stockChart.options.series[u + Columns_Grid.length-2].data = tab_sens_vent;
                stockChart.options.valueAxis[u].min = Math.floor(min_sens_vent - (Max_sens_vent - min_sens_vent) * 0.1);
                stockChart.options.valueAxis[u].max = Math.ceil(Max_sens_vent + (Max_sens_vent - min_sens_vent) * 0.1);
              }
              }
            stockChart.options.categoryAxis[0].labels.step = 120;
            stockChart.options.categoryAxis[0].majorTicks.step = 60;
            stockChart.options.categoryAxis[0].baseUnit = "minutes";
            stockChart.options.categoryAxis[1].categories = cat_date;
            stockChart.options.categoryAxis[1].labels.step = 120;
            stockChart.options.categoryAxis[1].majorTicks.step = 60;
            stockChart.options.categoryAxis[1].baseUnit = "minutes";
            stockChart._navigator.options.select.from = cat_date[0];
            stockChart._navigator.options.select.to = cat_date[cat_date.length-1];
            stockChart.refresh();
         
    }
</script>
@*choix mois*@
<script type="text/javascript">
        $("#mensuelle_Sep").kendoDatePicker({
            start: "year",
            depth: "year",
            format: "MMMM yyyy",
            close: myfunctionMoisrefresh,
         });
         //$(".k-state-default > .k-select").css("visibility", "hidden");
	     $(".k-input").css("background-color", "#e8e8e8");
	     $(".k-state-hover> .k-picker-wrap > .k-state-default").css("visibility", "hidden");
	    
	    var datepicker_month = $("#mensuelle_Sep").data("kendoDatePicker");
	      function MonthPicker(){
              datepicker_month.open("date");
	      }
          function  myfunctionMoisrefresh()
           {
            var k =1;
            var startTime = $("#mensuelle_Sep").data("kendoDatePicker").value();
            var list9 = [], orders_update = [],Min_Max=[],catt=[],orders_chart=[], tab_temp_mois=[];
            var table = [], tab_hum=[],tab_pluv=[],tab_ray=[],tab_vitesse=[],tab_sens_vent=[];
            var min_temp, max_temp ,min_hum ,max_hum ,min_pluv, max_pluv, min_ray, max_ray, min_vitesse, max_vitesse, min_sens, max_vitesse;
            $.ajax({
            url: '../../UserSession/TemperatureClimatByIntervalOneMonth',
            type: 'GET',
            data: { idNoeudClimat : @Model.ElementAt(0).IdParentNode, startTime : startTime },
            dataType: 'json',
            async: false,
            success: function (res) {
                var i = 0, k = 0, h = 0, g = 0,d = 0, f = 0;
                while ((res[i].Tmoy == null) && (i < res.length - 1)){
                    i++;
                }
                while ((res[k].Hmoy == null) && (k < res.length - 1)) {
                    k++;
                }
                while ((res[h].Pmoy == null) && (h < res.length - 1)) {
                    h++;
                }
                while ((res[g].Rmoy == null) && (g < res.length - 1)) {
                        g++;
                }
                while ((res[d].Rmoy == null) && (d < res.length - 1)) {
                        d++;
                }
                while ((res[f].Smoy == null) && (f < res.length - 1)) {
                        f++;
                }
                    var min_temp = res[i].Tmoy;
                    var max_temp = res[i].Tmoy;
                    var min_hum = res[i].Tmoy;
                    var max_hum = res[i].Tmoy;
                    var min_pluv = res[i].Tmoy;
                    var max_pluv = res[i].Tmoy;
                    var min_ray = res[i].Tmoy;
                    var max_ray = res[i].Tmoy;
                    var min_vitesse = res[i].Tmoy;
                    var max_vitesse = res[i].Tmoy;
                    var min_sens = res[i].Tmoy;
                    var max_sens = res[i].Tmoy;
                for (var j = 0; j < res.length; j++) {
                    var date = new Date(Number(res[j].DateMesureMoy.substring(6, 19)));
                    if(res[j].Tmoy > max_temp)
                    {
                        max_temp = res[j].Tmoy;
                    }
                    else if(res[j].Tmoy < min_temp)
                    {
                        min_temp = res[j].Tmoy;
                    }
                    if(res[j].Hmoy > max_hum)
                    {
                        max_hum = res[j].Hmoy;
                    }
                    else if(res[j].Hmoy < min_hum)
                    {
                        min_hum = res[j].Hmoy;
                    }
                    if(res[j].Pmoy > max_pluv)
                    {
                        max_pluv = res[j].Pmoy;
                    }
                    else if(res[j].Pmoy < min_pluv)
                    {
                        min_pluv = res[j].Pmoy;
                    }
                    if(res[j].Rmoy > max_ray)
                    {
                        max_ray = res[j].Rmoy;
                    }
                    else if(res[j].Rmoy < min_ray)
                    {
                        min_ray = res[j].Rmoy;
                    }
                    if(res[j].Rmoy > max_ray)
                    {
                        max_ray = res[j].Rmoy;
                    }
                    else if(res[j].Rmoy < min_ray)
                    {
                        min_ray = res[j].Rmoy;
                    }
                    var ttt=res[j].DateMesureMoy;
                    catt.push(date);
                    tab_temp_mois.push(res[j].Tmoy);
                    orders_chart.push({
                        Id: k++,
                        OrderDate: date,
                        OrderDate22: ttt,
                        Temperature: res[j].Tmoy,
                    });
                       table.push(res[j].Tmoy);
                       tab_hum.push(res[j].Hmoy);
                       tab_pluv.push(null);
                       tab_ray.push(res[j].Rmoy);
                       tab_vitesse.push(res[j].Vmoy);
                       tab_sens_vent.push(null);
                    if (res[j].Tmoy != null) {
                        orders_update.push({
                            ID:k++,
                            OrderDate: date,
                            Temperature: res[j].Tmoy,
                            Humidite: res[j].Hmoy,
                            Pluviometrie: res[j].Pmoy,
                            Rayonnement: res[j].Rmoy,
                            VitesseVent: res[j].Vmoy,
                            sensvent: res[j].Smoy,
                        });
                    }
                }
            }
        });
         var stockChart = $("#stock-chart_separ").data("kendoStockChart");
           // stockChart.options.title.text = +(now.getMonth()+1) +" - "+now.getFullYear(), 
            stockChart.options.title.text = "mois : " + kendo.format('{0:MM/yyyy}',startTime); 
            stockChart.options.categoryAxis[0].categories=catt;
            stockChart.options.navigator.series.type="line";
            stockChart.options.categoryAxis[0].labels.step=2;
            stockChart.options.categoryAxis[0].majorTicks.step=1;
            stockChart.options.categoryAxis[0].baseUnit="days";
            for(var u = 0;u < Columns_Grid.length-2;u++)
              {
              if(Columns_Grid[u+2].field == "Temperature")
              {
                stockChart.options.series[u].data = table;
                stockChart.options.series[u+Columns_Grid.length-2].data = table;
              }
              else if(Columns_Grid[u+2].field == "Humidite")
              {
                stockChart.options.series[u].data = tab_hum;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_hum;
              }
              else if(Columns_Grid[u+2].field == "Pluviometrie")
              {
                stockChart.options.series[u].data = tab_pluv;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_pluv;
              }
              else if(Columns_Grid[u+2].field == "Rayonnement")
              {
                stockChart.options.series[u].data = tab_ray;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_ray;
              }
              else if(Columns_Grid[u+2].field == "VitesseVent")
              {
                stockChart.options.series[u].data = tab_vitesse;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_vitesse;
              }
              else if(Columns_Grid[u+2].field == "sensvent")
              {
                stockChart.options.series[u].data = tab_sens_vent;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_sens_vent;
              }
              }
            stockChart.options.categoryAxis[1].categories = catt;
            stockChart.options.categoryAxis[1].labels.step = 2;
            stockChart.options.categoryAxis[1].majorTicks.step = 1;
            stockChart.options.categoryAxis[1].baseUnit = "days";
            stockChart._navigator.options.select.from = catt[0];
            stockChart._navigator.options.select.to = catt[catt.length-1];
            stockChart.refresh();
            jQuery("#grid_Courbes_separées").data("kendoGrid").dataSource.data(orders_update); 
            jQuery("#grid_Courbes_separées").data("kendoGrid").refresh();
       }
</script>
<script type="text/javascript">

    $("#Hebdomadaire_Sep").kendoDatePicker({
        change: myfonctionWeekRefresh
    });
    //$(".k-state-default > .k-select").css("visibility", "hidden");
    $(".k-input").css("background-color", "#e8e8e8");
    $(".k-state-hover> .k-picker-wrap > .k-state-default").css("visibility", "hidden");

    var datepicker_Week = $("#Hebdomadaire_Sep").data("kendoDatePicker");
    function WeekPicker() {
        datepicker_Week.open("date");

    }
      function myfonctionWeekRefresh() {
            var tr = $(".k-state-selected", Hebdomadaire_Sep._table).closest("tr");
                            var day = this.value();
                            var first = $("td:first", tr).find("a").attr("title");
                            var last = $("td:last", tr).find("a").attr("title");
             var startTime =new Date(first);
             var endTime = new Date(last);
             var  Min_Max = [], orders_update = [], seuil_min = [],seuil_max = [],cat_semaine=[],temp_semaine=[];
             var table = [], tab_hum=[],tab_pluv=[],tab_ray=[],tab_vitesse=[],tab_sens_vent=[];
             var nb_ligne = 1;
             $.ajax({
                    url: '../../UserSession/MesureClimatByWeek',
                    type: 'GET',
                    data: { idNoeudClimat : @Model.ElementAt(0).IdParentNode, startTime : startTime,endTime:endTime },
                    dataType: 'json',
                    async: false,
                    success: function (res) {
                        var min = res[0].TemperatureClimat;
                        var Max = res[0].TemperatureClimat;
                        for (var j = 0; j < res.length; j++) {
                             var date = new Date(Number(res[j].DateMesure.substring(6, 19)));
//                            if(res[j].TemperatureClimat>Max)
//                            {
//                             Max=res[j].TemperatureClimat;
//                            }
//                            else if(res[j].TemperatureClimat<min)
//                            {
//                              min=res[j].TemperatureClimat;
//                            }
//                             if(res[j].TemperatureClimat>list_seuil[1])
//                            {
//                            seuil_max.push([date.getTime(), res[j].TemperatureClimat]);
//                            }
//                            else{
//                            seuil_max.push([date.getTime(), null]);
//                            }
//                            if(res[j].TemperatureClimat<list_seuil[0])
//                            {
//                            seuil_min.push([date.getTime(), res[j].TemperatureClimat]);
//                            }
//                            else 
//                            {
//                             seuil_min.push([date.getTime(), null]);
//                            }
                            var temps_chart=res[j].DateMesure;
                           temp_semaine.push(res[j].TemperatureClimat);
                           table.push(res[j].TemperatureClimat);
                           tab_hum.push(res[j].HumiditeClimat);
                           tab_pluv.push(res[j].PluviometrieClimat);
                           tab_ray.push(res[j].RayonnementClimat);
                           tab_vitesse.push(res[j].VitesseVentClimat);
                           tab_sens_vent.push(res[j].SensVentClimat);
                           cat_semaine.push(temps_chart);
                           if (res[j].TemperatureClimat != null) {
                                orders_update.push({
                                    Id: nb_ligne++,
                                    OrderDate: date,
                                    Temperature: res[j].TemperatureClimat,
                                    Humidite: res[j].HumiditeClimat,
                                    Pluviometrie: res[j].PluviometrieClimat,
                                    Rayonnement: res[j].RayonnementClimat,
                                    VitesseVent: res[j].VitesseVentClimat,
                                    sensvent: res[j].SensVentClimat,
                                });
                            }
                       }
                    }
                });

            jQuery("#grid_Courbes_separées").data("kendoGrid").dataSource.data(orders_update); 
            jQuery("#grid_Courbes_separées").data("kendoGrid").refresh();
            var stockChart = $("#stock-chart_separ").data("kendoStockChart");
            stockChart.options.title.text = "Date début : " + kendo.format('{0:dd/MM/yyyy}',startTime) + "- Date fin : "+ kendo.format('{0:dd/MM/yyyy}',endTime); 
            stockChart.options.categoryAxis[0].categories = cat_semaine;
            stockChart.options.categoryAxis[0].labels.step = 480;
            //stockChart.options.series[0].markers.visible = false;
            stockChart.options.categoryAxis[0].majorTicks.step = 300;
            stockChart.options.categoryAxis[0].baseUnit = "minutes";
            for(var u=0;u<Columns_Grid.length-2;u++)
              {
              if(Columns_Grid[u+2].field == "Temperature")
              {
                stockChart.options.series[u].data = table;
                stockChart.options.series[u+Columns_Grid.length-2].data = table;
              }
              else if(Columns_Grid[u+2].field == "Humidite")
              {
                stockChart.options.series[u].data = tab_hum;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_hum;
              }
              else if(Columns_Grid[u+2].field == "Pluviometrie")
              {
                stockChart.options.series[u].data = tab_pluv;
                 stockChart.options.series[u+Columns_Grid.length-2].data = tab_pluv;
              }
              else if(Columns_Grid[u+2].field == "Rayonnement")
              {
                stockChart.options.series[u].data = tab_ray;
                 stockChart.options.series[u+Columns_Grid.length-2].data = tab_ray;
              }
              else if(Columns_Grid[u+2].field == "VitesseVent")
              {
                stockChart.options.series[u].data = tab_vitesse;
                 stockChart.options.series[u+Columns_Grid.length-2].data = tab_vitesse;
              }
              else if(Columns_Grid[u+2].field == "sensvent")
              {
                stockChart.options.series[u].data = tab_sens_vent;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_sens_vent;
              }
              }
             stockChart.options.categoryAxis[1].categories = cat_semaine;
            stockChart.options.categoryAxis[1].labels.step = 480;
            stockChart.options.categoryAxis[1].majorTicks.step = 300;
            stockChart.options.categoryAxis[1].baseUnit = "minutes";
            stockChart._navigator.options.select.from = cat_semaine[0];
            stockChart._navigator.options.select.to = cat_semaine[cat_semaine.length-1];
            stockChart.refresh();
 }

</script>


 @*choix periode*@
 <script type="text/javascript">
     function Periode() {
         var window = $("#window2_separ");
         window.data("kendoWindow").center().open();
     }
  </script>
    <script type='text/javascript'>
        function startChange() {
            var startDate = start.value(),
                endDate = end.value();
              if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                end.min(startDate);
            } else if (endDate) {
                start.max(new Date(endDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }

        function endChange() {
            var endDate = end.value(),
                startDate = start.value();
               if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                start.max(endDate);
            } else if (startDate) {
                end.min(new Date(startDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }

        var start = $("#start").kendoDateTimePicker({
            change: startChange
        }).data("kendoDateTimePicker");

        var end = $("#end").kendoDateTimePicker({
            change: endChange,
            // close: myfunctionperiodrefresh,
        }).data("kendoDateTimePicker");

        start.max(end.value());
        end.min(start.value());
        $("#valider_periode_separ").kendoButton({
            click: myfunctionperiodrefresh,
            imageUrl: "../content/themes/base/images/connection.png",
        });
        $("#annuler_separ").kendoButton({
            click: exit,
            imageUrl: "../content/themes/base/images/cancel.png",
        });
        function exit()
        {
            $("#window2_separ").data("kendoWindow").center().close();
        } 

          function myfunctionperiodrefresh()
        {
//         var window = $("#window2");
//	       window.data("kendoWindow").center().close();
           var startTime = $("#start").data("kendoDateTimePicker").value();
           var endTime = $("#end").data("kendoDateTimePicker").value();
           var Min_Max = [], orders_update = [], seuil_min = [],seuil_max = [],tab_temp_periode=[],cat_periode=[];
           var table = [], tab_hum=[],tab_pluv=[],tab_ray=[],tab_vitesse=[],tab_sens_vent=[];
           var inc = 1;
           $.ajax({
            url: '../../UserSession/AllMesureClimatByInterval',
            type: 'GET',
            data: { idNoeudClimat : @Model.ElementAt(0).IdParentNode, startTime : startTime,endTime:endTime },
            dataType: 'json',
            async: false,
            success: function (res) {
            var min = res[0].TemperatureClimat;
                    var Max = res[0].TemperatureClimat;
                for (var j = 0; j < res.length; j++) {
                    
                    var date = new Date(Number(res[j].DateMesure.substring(6, 19)));
//                    if(res[j].TemperatureClimat>Max)
//                    {
//                     Max=res[j].TemperatureClimat;
//                    }
//                    else if(res[j].TemperatureClimat<min)
//                    {
//                      min=res[j].TemperatureClimat;
//                    }
//                     if(res[j].TemperatureClimat>list_seuil[1])
//                    {
//                    seuil_max.push([date.getTime(), res[j].TemperatureClimat]);
//                    }
//                    else{
//                    seuil_max.push([date.getTime(), null]);
//                    }
//                    if(res[j].TemperatureClimat<list_seuil[0])
//                    {
//                    seuil_min.push([date.getTime(), res[j].TemperatureClimat]);
//                    }
//                    else 
//                    {
//                     seuil_min.push([date.getTime(), null]);
//                    }
                    var temps = res[j].DateMesure;
                       table.push(res[j].TemperatureClimat);
                       tab_hum.push(res[j].HumiditeClimat);
                       tab_pluv.push(res[j].PluviometrieClimat);
                       tab_ray.push(res[j].RayonnementClimat);
                       tab_vitesse.push(res[j].VitesseVentClimat);
                       tab_sens_vent.push(res[j].SensVentClimat);
                    cat_periode.push(temps);
                    tab_temp_periode.push(res[j].TemperatureClimat);
                  if (res[j].TemperatureClimat != null) {
                        orders_update.push({
                            Id : inc++,
                            OrderDate: date,
                            Temperature: res[j].TemperatureClimat,
                            Humidite: res[j].HumiditeClimat,
                            Pluviometrie: res[j].PluviometrieClimat,
                            Rayonnement: res[j].RayonnementClimat,
                            VitesseVent: res[j].VitesseVentClimat,
                            sensvent: res[j].SensVentClimat,
                        });
                    }
               }
            }
        });

        jQuery("#grid_Courbes_separées").data("kendoGrid").dataSource.data(orders_update); 
        jQuery("#grid_Courbes_separées").data("kendoGrid").refresh();
         var stockChart = $("#stock-chart_separ").data("kendoStockChart");
            stockChart.options.title.text = "Date debut : " +startTime.getFullYear()+"-"+(startTime.getMonth()+1)+"-" +startTime.getDate()+" "+startTime.getHours()+":"+startTime.getMinutes()+"- date fin: " +endTime.getFullYear()+"-"+(endTime.getMonth()+1)+"-" +endTime.getDate()+" "+endTime.getHours()+":"+endTime.getMinutes(); 
            stockChart.options.categoryAxis[0].categories = cat_periode;
            stockChart.options.categoryAxis[0].labels.step = 2400;
            stockChart.options.categoryAxis[0].majorTicks.step = 1200;
            stockChart.options.categoryAxis[0].baseUnit = "minutes";
             for(var u=0;u<Columns_Grid.length-2;u++)
              {
              if(Columns_Grid[u+2].field == "Temperature")
              {
                stockChart.options.series[u].data = table;
                stockChart.options.series[u + Columns_Grid.length-2].data = table;
                //stockChart.options.series[u].markers.visible = false;
              }
              else if(Columns_Grid[u+2].field == "Humidite")
              {
                stockChart.options.series[u].data = tab_hum;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_hum;
                //stockChart.options.series[u].markers.visible = false;
              }
              else if(Columns_Grid[u+2].field == "Pluviometrie")
              {
                stockChart.options.series[u].data = tab_pluv;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_pluv;
                //stockChart.options.series[u].markers.visible = false;
              }
              else if(Columns_Grid[u+2].field == "Rayonnement")
              {
                stockChart.options.series[u].data = tab_ray;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_ray;
                //stockChart.options.series[u].markers.visible = false;
              }
              else if(Columns_Grid[u+2].field == "VitesseVent")
              {
                stockChart.options.series[u].data = tab_vitesse;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_vitesse;
                //stockChart.options.series[u].markers.visible = false;
              }
              else if(Columns_Grid[u+2].field == "sensvent")
              {
                stockChart.options.series[u].data = tab_sens_vent;
                stockChart.options.series[u+Columns_Grid.length-2].data = tab_sens_vent;
                //stockChart.options.series[u].markers.visible = false;
              }
              }
            //stockChart.options.series[0].name="Temperature";
            //stockChart.options.series[0].data=tab_temp_periode;
            //stockChart.options.valueAxis[0].min=Min_Max[0];
            //stockChart.options.valueAxis[0].max=Min_Max[1]+5;
            stockChart.options.categoryAxis[1].categories = cat_periode;
            stockChart.options.categoryAxis[1].labels.step = 600;
            stockChart.options.categoryAxis[0].majorTicks.step = 600;
            stockChart.options.categoryAxis[1].baseUnit = "minutes";
            stockChart._navigator.options.select.from = cat_periode[0];
            stockChart._navigator.options.select.to = cat_periode[cat_periode.length-1];
            stockChart.refresh();
            var window = $("#window2_separ");
            window.data("kendoWindow").center().close();
       }
</script>
@*Grid*@
<script type="text/javascript">

    function Selection_Courbe(x) {
        var chart = $("#stock-chart").data("kendoStockChart");
        alert('hello');
        // chart.series[0].markers.visible=true;
    }
    $("#refresh_serp").click(function () {
        myfunctionDaterefresh();
    });

    function clickMonBoutonPdf() {
        var chart = $("#stock-chart_separ").data("kendoStockChart");
        var image = chart.imageDataURL(); //Kendo UI
        var a = $("<a>").attr("href", image).attr("download", "img.png").appendTo("body");
        a[0].click();
        a.remove();
    }
    function clickMonBoutonExcel() {
        var dataSource = $("#grid_Courbes_separées").data("kendoGrid").dataSource;
        var filteredDataSource = new kendo.data.DataSource({
            data: dataSource.data(),
            filter: dataSource.filter()
        });

        filteredDataSource.read();
        var data = filteredDataSource.view();
        var result = "data:application/vnd.ms-excel,";
        result += "<table><tr><th>Date</th><th>Température °C</th><th> Date</th></tr>";
        for (var i = 0; i < data.length; i++) {
            result += "<tr>";
            result += "<td>";
            result += data[i].OrderDate;
            result += "</td>";
            result += "<td>";
            result += data[i].Temperature;
            result += "</td>";
            result += "</tr>";
        }
        result += "</table>";
        if (window.navigator.msSaveBlob) {
            window.navigator.msSaveBlob(new Blob([result]), 'export.csv');
        } else {
            window.open(result);
        }
    }

    $("#btnExport").kendoButton({
        imageUrl: "../../Content/themes/base/images/excel.png"
    });

    $("#btnExport").click(function (e) {
        var dataSource = $("#grid_Courbes_separées").data("kendoGrid").dataSource;
        var filteredDataSource = new kendo.data.DataSource({
            data: dataSource.data(),
            filter: dataSource.filter()
        });

        filteredDataSource.read();
        var data = filteredDataSource.view();
        var result = "data:application/vnd.ms-excel,";
        result += "<table><tr><th>numéro</th><th>Date</th><th>Température °C</th><th> Date</th></tr>";
        for (var i = 0; i < data.length; i++) {
            result += "<tr>";

            result += "<td>";
            result += i;
            result += "</td>";

            result += "<td>";
            result += data[i].OrderDate;
            result += "</td>";

            result += "<td>";
            result += data[i].Temperature;
            result += "</td>";

            result += "</tr>";
        }

        result += "</table>";
        if (window.navigator.msSaveBlob) {
            window.navigator.msSaveBlob(new Blob([result]), 'export.csv');
        } else {
            window.open(result);
        }

    });

    function selectRow(Datee, temp) {
        var linesToSelect = [];
        $.each($('.k-grid-content tbody').children(), function (index, line) {
            var fffpp = new Date($("#grid_Courbes_separées").data("kendoGrid").dataItem(line).OrderDate);
            if ((fffpp.getFullYear() == Datee.getFullYear()) && (fffpp.getMonth() == Datee.getMonth()) && (fffpp.getDay() == Datee.getDay()) && (fffpp.getHours() == Datee.getHours()) && (fffpp.getMinutes() == Datee.getMinutes()))
                linesToSelect.push(line);
        });
        $("#grid_Courbes_separées").data("kendoGrid").select(linesToSelect);
    }
  
</script>
 